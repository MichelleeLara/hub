---
interface Props {
  Title: string;
  Description: string;
  colors?: Array<{
    color: string;
    position?: string; // Ahora incluye top-center y bottom-center
  }> | string;
}

const { Title, Description, colors = [] } = Astro.props;

const colorArray = Array.isArray(colors) 
  ? colors.map(c => typeof c === 'string' ? { color: c } : c)
  : typeof colors === 'string' 
    ? [{ color: colors }] 
    : [];

const defaultPositions = [
  'top-left',
  'top-center',
  'top-right',
  'bottom-left',
  'bottom-center',
  'bottom-right'
];

const getPosition = (position: string) => {
  const positions = {
    'top-left': 'translate(-70%, -70%)',
    'top-center': 'translate(0%, -70%)',
    'top-right': 'translate(70%, -70%)',
    'bottom-left': 'translate(-70%, 70%)',
    'bottom-center': 'translate(0%, 70%)',
    'bottom-right': 'translate(70%, 70%)',
    'center': 'translate(0%, 0%)'
  };
  return positions[position] || 'translate(0, 0)';
};
---

<div class="tech-card rounded-xl flex gap-1 items-center py-4 px-4 justify-center bg-[#1a1a1a] overflow-hidden relative">
  <div class="flex flex-col gap-1 items-center justify-center">
    <div class="icon-container">
      <div class="icon-wrapper">
        <slot name="icon" />
      </div>
    </div>

    
    <div class="absolute w-full">
      <!-- {colorArray.map((colorObj, index) => {
        const position = colorObj.position || defaultPositions[index] || 'center';
        return (
          <div
            class={`blur-shadow ${position}`}
            style={`
              --shadow-color: ${colorObj.color};
              --shadow-transform: ${getPosition(position)};
            `}
          />
        );
      })} -->
      <div class="blur-shadow">
        <slot name="icon"/>
      </div>
    </div>
    
    <div class="relative z-30 text-center flex flex-col gap-0.5">
      <h4 class="font-semibold text-secondary text-sm">{Title}</h4>
      <p class="text-xs text-terteary font-medium">{Description}</p>
    </div>
  </div>
</div>

<style>
  .tech-card {
    container-type: inline-size;
  }

  .icon-container {
    width: 60px;
    height: 60px;
    position: relative;
    display: grid;
    place-items: center;
    overflow: hidden;
  }

  .icon-wrapper {
    width: 28px;
    height: 28px;
    display: grid;
    place-items: center;
    position: relative;
    z-index: 2;
  }

  .blur-shadow {
    position: absolute;
    width: 12rem;
    top: -5rem;
    background: var(--shadow-color);
    filter: blur(40px);
    /* opacity: 0.3; */
    border-radius: 50%;
    transform: var(--shadow-transform);
    transition: all 0.3s ease;
    /* mix-blend-mode: screen; */
  }

  /* Posicionamiento actualizado incluyendo posiciones centrales */
  .blur-shadow.top-left {
    top: 40%;
    left: 40%;
  }

  .blur-shadow.top-center {
    top: 40%;
    left: 50%;
  }

  .blur-shadow.top-right {
    top: 40%;
    left: 60%;
  }

  .blur-shadow.bottom-left {
    top: 60%;
    left: 40%;
  }

  .blur-shadow.bottom-center {
    top: 60%;
    left: 50%;
  }

  .blur-shadow.bottom-right {
    top: 60%;
    left: 60%;
  }

  .blur-shadow.center {
    top: 50%;
    left: 50%;
  }

  /* Hover effect */
  .tech-card:hover .blur-shadow {
    /* opacity: 0.4; */
    width: 50px;
    height: 50px;
  }

  /* Animaci√≥n sutil */
  @keyframes pulseGlow {
    0%, 100% { transform: var(--shadow-transform) scale(1); }
    50% { transform: var(--shadow-transform) scale(1.1); }
  }

  .blur-shadow {
    animation: pulseGlow 4s ease-in-out infinite;
    animation-delay: calc(var(--index, 0) * 0.5s);
  }

  @media (prefers-reduced-motion: reduce) {
    .blur-shadow {
      animation: none;
    }
  }
</style>